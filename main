#!/bin/bash
#PBS -l nodes=1:ppn=16,walltime=4:00:00
#PBS -l vmem=50gb
#PBS -N PyNets

# This file is used to execute PyNets on brainlife.
# brainlife stages this git repo, writes `config.json` and execute this script.
# this script reads the `config.json` and execute pynets container through singularity

# you can run this script(main) without any parameter to test how this App will run outside brainlife
# you will need to copy config.json.brainlife-sample to config.json before running `main` as `main`
# will read all parameters from config.json

set -x
set -e

mkdir -p output tmp

# usage: pynets [-h] -id A subject id or other unique identifier
#               [A subject id or other unique identifier ...]
#               [-func Path to input functional file required for functional connectomes) [Path to input functional file (required for functional connectomes) ...]]
#               [-dwi Path to diffusion-weighted imaging data file (required for dmri connectomes) [Path to diffusion-weighted imaging data file (required for dmri connectomes) ...]]
#               [-bval Path to b-values file (required for dmri connectomes) [Path to b-values file (required for dmri connectomes) ...]]
#               [-bvec Path to b-vectors file (required for dmri connectomes) [Path to b-vectors file (required for dmri connectomes) ...]]
#               [-anat Path to a skull-stripped anatomical Nifti1Image [Path to a skull-stripped anatomical Nifti1Image ...]]
#               [-m Path to a T1w brain mask image (if available) in native anatomical space [Path to a T1w brain mask image (if available) in native anatomical space ...]]
#               [-conf Confound regressor file (.tsv/.csv format) [Confound regressor file (.tsv/.csv format) ...]]
#               [-g Path to graph file input. [Path to graph file input. ...]]
#               [-roi Path to binarized Region-of-Interest (ROI) Nifti1Image in template MNI space. [Path to binarized Region-of-Interest (ROI) Nifti1Image in template MNI space. ...]]
#               [-ref Atlas reference file path]
#               [-way Path to binarized Nifti1Image to constrain tractography [Path to binarized Nifti1Image to constrain tractography ...]]
#               [-ua Path to custom parcellation file [Path to custom parcellation file ...]]
#               [-mod Connectivity estimation/reconstruction method [Connectivity estimation/reconstruction method ...]]
#               [-a Atlas [Atlas ...]]
#               [-ns Spherical centroid node size [Spherical centroid node size ...]]
#               [-thr Graph threshold]
#               [-min_thr Multi-thresholding minimum threshold]
#               [-max_thr Multi-thresholding maximum threshold]
#               [-step_thr Multi-thresholding step size]
#               [-sm Smoothing value (mm fwhm) [Smoothing value (mm fwhm) ...]]
#               [-hp High-pass filter (Hz) [High-pass filter (Hz) ...]]
#               [-es Node extraction strategy [Node extraction strategy ...]]
#               [-k Number of k clusters [Number of k clusters ...]]
#               [-ct Clustering type [Clustering type ...]]
#               [-cm Cluster mask [Cluster mask ...]]
#               [-ml Minimum fiber length for tracking [Minimum fiber length for tracking ...]]
#               [-dg Direction getter [Direction getter ...]]
#               [-norm Normalization strategy for resulting graph(s)] [-bin]
#               [-dt] [-mst] [-p Pruning Strategy] [-df]
#               [-mplx Perform various levels of multiplex graph analysis (only if both structural and diffusion connectometry is run simultaneously.]
#               [-embed] [-spheres]
#               [-n Resting-state network [Resting-state network ...]]
#               [-vox {1mm,2mm}] [-plt] [-pm Cores,memory]
#               [-plug Scheduler type] [-v] [-clean] [-work Working directory]
#               [--version]
#               output_dir


#construct arguments for optional inputs
optional=""
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

dwi=$(jq -r .dwi config.json)
if [[ $dwi != "null" ]]; then
    bval=$(jq -r .bvals config.json)
    bvec=$(jq -r .bvecs config.json)
    optional="$optional -dwi $DIR/$(basename $dwi) -bval $DIR/$(basename $bval) -bvec $DIR/$(basename $bvec)"
fi

bold=$(jq -r .bold config.json)
if [[ $bold != "null" ]];then
    conf=$(jq -r .regressors config.json)
    if [[ $conf != "null" ]];then
        optional="$optional -func $DIR/$(basename $bold) -conf $DIR/$(basename $conf)"
    else
        optional="$optional -func $DIR/$(basename $bold)"
    fi
fi

mask=$(jq -r .mask config.json)
if [[ $mask != "null" ]];then
    optional="$optional -m $DIR/$(basename $mask)"
fi

useratlas=$(jq -r .useratlas config.json)
if [[ $useratlas != "null" ]]; then
    if [ $(echo -e "$useratlas" | wc -l) -gt 1 ]; then
        optional="$optional -ua"
        while IFS= read -r line ; do
            optional="$optional $DIR/$(basename $line)"
        done <<< "$useratlas"
    else
        optional="$optional -ua $DIR/$(basename $useratlas)"
    fi
fi

atlas=$(jq -r .atlas config.json)
if [[ $atlas != "null" ]]; thens
    if [ $(echo -e "$atlas" | wc -l) -gt 1 ]; then
        optional="$optional -a"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$atlas"
    else
        optional="$optional -a $atlas"
    fi
fi

min_thr=$(jq -r .min_thr config.json)
max_thr=$(jq -r .max_thr config.json)
step_thr=$(jq -r .step_thr config.json)
thr=$(jq -r .thr config.json)
if [[ $min_thr != "null" ]]; then
    optional="$optional -min_thr $min_thr"
    optional="$optional -max_thr $max_thr"
    optional="$optional -step_thr $step_thr"
else
    optional="$optional -thr $thr"
fi

# Boolean options
[ "$(jq -r .mst config.json)" == "true" ] && optional="$optional -mst"
[ "$(jq -r .dt config.json)" == "true" ] && optional="$optional -dt"
[ "$(jq -r .embed config.json)" == "true" ] && optional="$optional -embed"
[ "$(jq -r .df config.json)" == "true" ] && optional="$optional -df"
[ "$(jq -r .plt config.json)" == "true" ] && optional="$optional -plt"
[ "$(jq -r .bin config.json)" == "true" ] && optional="$optional -bin"
[ "$(jq -r .spheres config.json)" == "true" ] && optional="$optional -spheres"

prune=$(jq -r .p config.json)
if [[ "$prune" != "1" ]]; then
    optional="$optional -p $prune"
fi

norm=$(jq -r .norm config.json)
if [[ "$norm" != "1" ]]; then
    optional="$optional -norm $norm"
fi

mplx=$(jq -r .mplx config.json)
if [[ "$mplx" != "0" ]]; then
    optional="$optional -mplx $mplx"
fi

rsn=$(jq -r .n config.json)
if [[ "$rsn" != "null" ]]; then
    if [ $(echo -e "$rsn" | wc -l) -gt 1 ]; then
        optional="$optional -n"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$rsn"
    else
        optional="$optional -n $rsn"
    fi
fi

em=$(jq -r .em config.json)
if [[ "$em" != "mean" ]]; then
    if [ $(echo -e "$em" | wc -l) -gt 1 ]; then
        optional="$optional -em"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$em"
    else
        optional="$optional -em $em"
    fi
fi

sm=$(jq -r .sm config.json)
if [[ "$sm" != "0" ]]; then
    if [ $(echo -e "$sm" | wc -l) -gt 1 ]; then
        optional="$optional -sm"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$sm"
    else
        optional="$optional -sm $sm"
    fi
fi

hp=$(jq -r .hp config.json)
if [[ "$hp" != "0" ]]; then
    if [ $(echo -e "$hp" | wc -l) -gt 1 ]; then
        optional="$optional -hp"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$hp"
    else
        optional="$optional -hp $hp"
    fi
fi

dg=$(jq -r .dg config.json)
if [[ "$dg" != "det" ]]; then
    if [ $(echo -e "$dg" | wc -l) -gt 1 ]; then
        optional="$optional -dg"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$dg"
    else
        optional="$optional -dg $dg"
    fi
fi

ml=$(jq -r .ml config.json)
if [[ "$ml" != "20" ]]; then
    if [ $(echo -e "$ml" | wc -l) -gt 1 ]; then
        optional="$optional -ml"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$ml"
    else
        optional="$optional -ml $ml"
    fi
fi

tol=$(jq -r .tol config.json)
if [[ "$tol" != "10" ]]; then
    if [ $(echo -e "$tol" | wc -l) -gt 1 ]; then
        optional="$optional -tol"
        while IFS= read -r line ; do
            optional="$optional $line"
        done <<< "$tol"
    else
        optional="$optional -tol $tol"
    fi
fi

t1w=$(jq -r .t1 config.json)

singularity run -e docker://dpys/pynets:03a1f40583de5a7948e31741173994674a7450a2 pynets \
    $DIR/output \
    -id $(jq -r .id config.json) \
    -anat $DIR/$(basename $t1w) \
    -work $DIR/work \
    -mod $(jq -r .mod config.json) \
    $optional

# graph
# diffusion
# diffusion / functional
# functional
