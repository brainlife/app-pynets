#!/bin/bash
#PBS -l nodes=1:ppn=8,walltime=2:00:00
#PBS -l vmem=50gb
#PBS -N pynet

# This file is used to execute PyNets on brainlife.
# brainlife stages this git repo, writes `config.json` and execute this script.
# this script reads the `config.json` and execute pynets container through singularity

# you can run this script(main) without any parameter to test how this App will run outside brainlife
# you will need to copy config.json.brainlife-sample to config.json before running `main` as `main`
# will read all parameters from config.json

set -x
set -e

mkdir -p output tmp

# usage: pynets [-h] -id A subject id or other unique identifier
#               [A subject id or other unique identifier ...]
#               [-func Path to input functional file required for functional connectomes) [Path to input functional file (required for functional connectomes) ...]]
#               [-dwi Path to diffusion-weighted imaging data file (required for dmri connectomes) [Path to diffusion-weighted imaging data file (required for dmri connectomes) ...]]
#               [-bval Path to b-values file (required for dmri connectomes) [Path to b-values file (required for dmri connectomes) ...]]
#               [-bvec Path to b-vectors file (required for dmri connectomes) [Path to b-vectors file (required for dmri connectomes) ...]]
#               [-anat Path to a skull-stripped anatomical Nifti1Image [Path to a skull-stripped anatomical Nifti1Image ...]]
#               [-m Path to a T1w brain mask image (if available) in native anatomical space [Path to a T1w brain mask image (if available) in native anatomical space ...]]
#               [-conf Confound regressor file (.tsv/.csv format) [Confound regressor file (.tsv/.csv format) ...]]
#               [-g Path to graph file input. [Path to graph file input. ...]]
#               [-roi Path to binarized Region-of-Interest (ROI) Nifti1Image in template MNI space. [Path to binarized Region-of-Interest (ROI) Nifti1Image in template MNI space. ...]]
#               [-ref Atlas reference file path]
#               [-way Path to binarized Nifti1Image to constrain tractography [Path to binarized Nifti1Image to constrain tractography ...]]
#               [-ua Path to custom parcellation file [Path to custom parcellation file ...]]
#               [-mod Connectivity estimation/reconstruction method [Connectivity estimation/reconstruction method ...]]
#               [-a Atlas [Atlas ...]]
#               [-ns Spherical centroid node size [Spherical centroid node size ...]]
#               [-thr Graph threshold]
#               [-min_thr Multi-thresholding minimum threshold]
#               [-max_thr Multi-thresholding maximum threshold]
#               [-step_thr Multi-thresholding step size]
#               [-sm Smoothing value (mm fwhm) [Smoothing value (mm fwhm) ...]]
#               [-hp High-pass filter (Hz) [High-pass filter (Hz) ...]]
#               [-es Node extraction strategy [Node extraction strategy ...]]
#               [-k Number of k clusters [Number of k clusters ...]]
#               [-ct Clustering type [Clustering type ...]]
#               [-cm Cluster mask [Cluster mask ...]]
#               [-ml Minimum fiber length for tracking [Minimum fiber length for tracking ...]]
#               [-dg Direction getter [Direction getter ...]]
#               [-norm Normalization strategy for resulting graph(s)] [-bin]
#               [-dt] [-mst] [-p Pruning Strategy] [-df]
#               [-mplx Perform various levels of multiplex graph analysis (only if both structural and diffusion connectometry is run simultaneously.]
#               [-embed] [-spheres]
#               [-n Resting-state network [Resting-state network ...]]
#               [-vox {1mm,2mm}] [-plt] [-pm Cores,memory]
#               [-plug Scheduler type] [-v] [-clean] [-work Working directory]
#               [--version]
#               output_dir


#construct arguments for optional inputs
optional=""

dwi=$(jq -r .dwi config.json)
if [ $dwi != "null" ]; then
    bval=`pwd`/$(jq -r .bvals config.json)
    bvec=`pwd`/$(jq -r .bvecs config.json)
    optional="$optional -dwi $(pwd)/$dwi -bval $bval -bvec $bvec"
fi

bold=$(jq -r .bold config.json)
if [ $bold != "null" ];then
    conf=`pwd`/$(jq -r .regressors config.json)
    if [ $conf != "null" ];then
        optional="$optional -func $(pwd)/$bold -conf $conf"
    else
        optional="$optional -func $(pwd)/$bold"
    fi
fi

mask=$(jq -r .mask config.json)
if [ $mask != "null" ];then
    optional="$optional -m $(pwd)/$mask"
fi

useratlas=$(jq -r .useratlas config.json)
if [ $useratlas != "null" ];then
    optional="$optional -ua $(pwd)/$useratlas"
else
    optional="$optional -a $(jq -r .atlas config.json)"
fi

min_thr=$(jq -r .min_thr config.json)
if [ $min_thr != "null" ];then
    optional="$optional -min_thr $min_thr"
    optional="$optional -max_thr $max_thr"
    optional="$optional -step_thr $step_thr"
else
    optional="$optional -thr $thr"
fi

# Boolean options
[ "$(jq -r .mst config.json)" == "true" ] && optional="$optional -mst"
[ "$(jq -r .dt config.json)" == "true" ] && optional="$optional -dt"
[ "$(jq -r .embed config.json)" == "true" ] && optional="$optional -embed"
[ "$(jq -r .df config.json)" == "true" ] && optional="$optional -df"
[ "$(jq -r .plt config.json)" == "true" ] && optional="$optional -plt"
[ "$(jq -r .bin config.json)" == "true" ] && optional="$optional -bin"
[ "$(jq -r .spheres config.json)" == "true" ] && optional="$optional -spheres"

prune=$(jq -r .p config.json)
[ "$prune" != "1" ] && optional="$optional -p $prune"

norm=$(jq -r .norm config.json)
[ "$norm" != "1" ] && optional="$optional -norm $norm"

mplx=$(jq -r .mplx config.json)
[ "$mplx" != "0" ] && optional="$optional -mplx $mplx"

rsn=$(jq -r .n config.json)
[ "$rsn" != "null" ] && optional="$optional -n $rsn"

em=$(jq -r .em config.json)
[ "$em" != "mean" ] && optional="$optional -em $em"

sm=$(jq -r .sm config.json)
[ "$sm" != "0" ] && optional="$optional -sm $sm"

hp=$(jq -r .hp config.json)
[ "$hp" != "0" ] && optional="$optional -hp $hp"

dg=$(jq -r .dg config.json)
[ "$dg" != "det" ] && optional="$optional -dg $dg"

ml=$(jq -r .ml config.json)
[ "$ml" != "20" ] && optional="$optional -ml $ml"

tol=$(jq -r .tol config.json)
[ "$tol" != "8" ] && optional="$optional -tol $tol"

singularity run -e docker://dpys/pynets:fc7c423fb99ade39e1f408721e93b97a12168aa0 pynets \
    `pwd`/output \
    -id $(jq -r .id config.json) \
    -anat `pwd`/$(jq -r .t1 config.json) \
    -work `pwd`/work \
    -mod $(jq -r .mod config.json) \
    $optional

# graph
# diffusion
# diffusion / functional
# functional
